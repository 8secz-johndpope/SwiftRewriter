diff --git a/Sources/ObjcParserAntlr/ObjectiveCLexer.swift b/Sources/ObjcParserAntlr/ObjectiveCLexer.swift
index 884c299..3127a47 100644
--- a/Sources/ObjcParserAntlr/ObjectiveCLexer.swift
+++ b/Sources/ObjcParserAntlr/ObjectiveCLexer.swift
@@ -1,36 +1,17 @@
 // Generated from /Users/luizsilva/Desktop/grammars-v4-master/objc/ObjectiveCLexer.g4 by ANTLR 4.7
 import Antlr4
-import Foundation
 
 open class ObjectiveCLexer: Lexer {
-    public class State {
-        public let _ATN: ATN = ATNDeserializer().deserializeFromJson(_serializedATN)
-        
-        internal var _decisionToDFA: [DFA]
-        internal let _sharedContextCache: PredictionContextCache = PredictionContextCache()
-        
-        public init() {
-            var decisionToDFA = [DFA]()
-            let length = _ATN.getNumberOfDecisions()
-            for i in 0..<length {
-                decisionToDFA.append(DFA(_ATN.getDecisionState(i)!, i))
-            }
-            _decisionToDFA = decisionToDFA
-        }
-    }
-    
-    public var _ATN: ATN {
-        return state._ATN
-    }
-    internal var _decisionToDFA: [DFA] {
-        return state._decisionToDFA
-    }
-    internal var _sharedContextCache: PredictionContextCache {
-        return state._sharedContextCache
-    }
-    
-    public var state: State
-    
+	internal static var _decisionToDFA: [DFA] = {
+          var decisionToDFA = [DFA]()
+          let length = ObjectiveCLexer._ATN.getNumberOfDecisions()
+          for i in 0..<length {
+          	    decisionToDFA.append(DFA(ObjectiveCLexer._ATN.getDecisionState(i)!, i))
+          }
+           return decisionToDFA
+     }()
+
+	internal static let _sharedContextCache:PredictionContextCache = PredictionContextCache()
 	public static let AUTO=1, BREAK=2, CASE=3, CHAR=4, CONST=5, CONTINUE=6, 
                    DEFAULT=7, DO=8, DOUBLE=9, ELSE=10, ENUM=11, EXTERN=12, 
                    FLOAT=13, FOR=14, GOTO=15, IF=16, INLINE=17, INT=18, 
@@ -234,6 +215,7 @@ open class ObjectiveCLexer: Lexer {
 		return tokenNames
 	}()
 
+	override
 	open func getTokenNames() -> [String?]? {
 		return tokenNames
 	}
@@ -242,21 +224,11 @@ open class ObjectiveCLexer: Lexer {
         return ObjectiveCLexer.VOCABULARY
     }
 
-    public required init(_ input: CharStream) {
-        self.state = State()
-        
-        RuntimeMetaData.checkVersion("4.7", RuntimeMetaData.VERSION)
-        super.init(input)
-        _interp = LexerATNSimulator(self,_ATN,_decisionToDFA, _sharedContextCache)
-    }
-    
-    public init(_ input: CharStream, _ state: State) {
-        self.state = state
-        
-        RuntimeMetaData.checkVersion("4.7", RuntimeMetaData.VERSION)
-        super.init(input)
-        _interp = LexerATNSimulator(self,_ATN,_decisionToDFA, _sharedContextCache)
-    }
+	public override init(_ input: CharStream) {
+	    RuntimeMetaData.checkVersion("4.7", RuntimeMetaData.VERSION)
+		super.init(input)
+		_interp = LexerATNSimulator(self, ObjectiveCLexer._ATN, ObjectiveCLexer._decisionToDFA, ObjectiveCLexer._sharedContextCache)
+	}
 
 	override
 	open func getGrammarFileName() -> String { return "ObjectiveCLexer.g4" }
@@ -274,7 +246,8 @@ open class ObjectiveCLexer: Lexer {
 	open func getModeNames() -> [String] { return ObjectiveCLexer.modeNames }
 
 	override
-	open func getATN() -> ATN { return _ATN }
+	open func getATN() -> ATN { return ObjectiveCLexer._ATN }
 
     public static let _serializedATN: String = ObjectiveCLexerATN().jsonString
-}
+	public static let _ATN: ATN = ATNDeserializer().deserializeFromJson(_serializedATN)
+}
\ No newline at end of file
diff --git a/Sources/ObjcParserAntlr/ObjectiveCParser.swift b/Sources/ObjcParserAntlr/ObjectiveCParser.swift
index 7da4248..140fd46 100644
--- a/Sources/ObjcParserAntlr/ObjectiveCParser.swift
+++ b/Sources/ObjcParserAntlr/ObjectiveCParser.swift
@@ -1,35 +1,18 @@
 // Generated from /Users/luizsilva/Desktop/grammars-v4-master/objc/ObjectiveCParser.g4 by ANTLR 4.7
+// Generated from /Users/luizfernandosilva/Documents/Projetos/objcgrammar/ObjectiveCParser.g4 by ANTLR 4.7
 import Antlr4
 
 open class ObjectiveCParser: Parser {
-    public class State {
-        public let _ATN: ATN = ATNDeserializer().deserializeFromJson(_serializedATN)
-        
-        internal var _decisionToDFA: [DFA]
-        internal let _sharedContextCache: PredictionContextCache = PredictionContextCache()
-        
-        public init() {
-            var decisionToDFA = [DFA]()
-            let length = _ATN.getNumberOfDecisions()
-            for i in 0..<length {
-                decisionToDFA.append(DFA(_ATN.getDecisionState(i)!, i))
-            }
-            _decisionToDFA = decisionToDFA
-        }
-    }
-    
-    public var _ATN: ATN {
-        return state._ATN
-    }
-    internal var _decisionToDFA: [DFA] {
-        return state._decisionToDFA
-    }
-    internal var _sharedContextCache: PredictionContextCache {
-        return state._sharedContextCache
-    }
-    
-    public var state: State
 
+	internal static var _decisionToDFA: [DFA] = {
+          var decisionToDFA = [DFA]()
+          let length = ObjectiveCParser._ATN.getNumberOfDecisions()
+          for i in 0..<length {
+            decisionToDFA.append(DFA(ObjectiveCParser._ATN.getDecisionState(i)!, i))
+           }
+           return decisionToDFA
+     }()
+	internal static let _sharedContextCache: PredictionContextCache = PredictionContextCache()
 	public enum Tokens: Int {
 		case EOF = -1, AUTO = 1, BREAK = 2, CASE = 3, CHAR = 4, CONST = 5, CONTINUE = 6, 
                  DEFAULT = 7, DO = 8, DOUBLE = 9, ELSE = 10, ENUM = 11, 
@@ -289,6 +272,7 @@ open class ObjectiveCParser: Parser {
 		return tokenNames
 	}()
 
+	override
 	open func getTokenNames() -> [String?]? {
 		return tokenNames
 	}
@@ -303,28 +287,17 @@ open class ObjectiveCParser: Parser {
 	open func getSerializedATN() -> String { return ObjectiveCParser._serializedATN }
 
 	override
-	open func getATN() -> ATN { return _ATN }
+	open func getATN() -> ATN { return ObjectiveCParser._ATN }
 
 	open override func getVocabulary() -> Vocabulary {
 	    return ObjectiveCParser.VOCABULARY
 	}
 
-	public override init(_ input: TokenStream) throws {
-		self.state = State()
-
-	    RuntimeMetaData.checkVersion("4.7", RuntimeMetaData.VERSION)
-		try super.init(input)
-		_interp = ParserATNSimulator(self,_ATN,_decisionToDFA, _sharedContextCache)
-	}
-
-	public init(_ input: TokenStream, _ state: State) throws {
-		self.state = state
-
+	public override init(_ input:TokenStream)throws {
 	    RuntimeMetaData.checkVersion("4.7", RuntimeMetaData.VERSION)
 		try super.init(input)
-		_interp = ParserATNSimulator(self,_ATN,_decisionToDFA, _sharedContextCache)
+		_interp = ParserATNSimulator(self,ObjectiveCParser._ATN,ObjectiveCParser._decisionToDFA, ObjectiveCParser._sharedContextCache)
 	}
-
 	open class TranslationUnitContext:ParserRuleContext {
 		open func EOF() -> TerminalNode? { return getToken(ObjectiveCParser.Tokens.EOF.rawValue, 0) }
 		open func topLevelDeclaration() -> Array<TopLevelDeclarationContext> {
@@ -14600,5 +14573,6 @@ open class ObjectiveCParser: Parser {
 		}
 	}
 
-   	public static let _serializedATN : String = ObjectiveCParserATN().jsonString
-}
+   public static let _serializedATN : String = ObjectiveCParserATN().jsonString
+   public static let _ATN: ATN = ATNDeserializer().deserializeFromJson(_serializedATN)
+}
\ No newline at end of file
