#if !canImport(ObjectiveC)
import XCTest

extension ObjcLexerTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ObjcLexerTests = [
        ("testStartRange", testStartRange),
        ("testStartRangeAfterInvokingToken", testStartRangeAfterInvokingToken),
        ("testStartRangeNextToken", testStartRangeNextToken),
        ("testStartRangeSkippingToken", testStartRangeSkippingToken),
        ("testStartRangeSkippingTokenAfterConsumingToken", testStartRangeSkippingTokenAfterConsumingToken),
    ]
}

extension ObjcLexer_TokenizerTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ObjcLexer_TokenizerTests = [
        ("testTokenizeAlphanumericKeywords", testTokenizeAlphanumericKeywords),
        ("testTokenizeAtKeywords", testTokenizeAtKeywords),
        ("testTokenizeId", testTokenizeId),
        ("testTokenizeIdentifiers", testTokenizeIdentifiers),
        ("testTokenizeOperators", testTokenizeOperators),
        ("testTokenizeSequence", testTokenizeSequence),
        ("testTokenizeSpecialChars", testTokenizeSpecialChars),
        ("testTokenizeTypeQualifier", testTokenizeTypeQualifier),
    ]
}

extension ObjcParserTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ObjcParserTests = [
        ("testConcreteSubclassOfGenericType", testConcreteSubclassOfGenericType),
        ("testInit", testInit),
        ("testParseAnnotations", testParseAnnotations),
        ("testParseArrayWithStructInit", testParseArrayWithStructInit),
        ("testParseAttributesInDirectDeclarators", testParseAttributesInDirectDeclarators),
        ("testParseAttributesInStructDeclaration", testParseAttributesInStructDeclaration),
        ("testParseClassMethodDeclaration", testParseClassMethodDeclaration),
        ("testParseComments", testParseComments),
        ("testParseComplexParameterTypeFunctionDefinition", testParseComplexParameterTypeFunctionDefinition),
        ("testParseComplexReturnTypeFunctionDefinition", testParseComplexReturnTypeFunctionDefinition),
        ("testParseCompoundStatementInExpression", testParseCompoundStatementInExpression),
        ("testParseDeclarationAfterComments", testParseDeclarationAfterComments),
        ("testParseDirectives", testParseDirectives),
        ("testParseError", testParseError),
        ("testParseFunctionDefinition", testParseFunctionDefinition),
        ("testParseFunctionDefinitionWithBody", testParseFunctionDefinitionWithBody),
        ("testParseFunctionPointerTypes", testParseFunctionPointerTypes),
        ("testParseGenericArgumentsInAtClassDeclaration", testParseGenericArgumentsInAtClassDeclaration),
        ("testParseGlobalFunctionPointer", testParseGlobalFunctionPointer),
        ("testParseIBInspectableProperty", testParseIBInspectableProperty),
        ("testParseIBOutletProperty", testParseIBOutletProperty),
        ("testParseIfWithExpressionList", testParseIfWithExpressionList),
        ("testParseImportDirectives", testParseImportDirectives),
        ("testParseKeywordsInSelectors", testParseKeywordsInSelectors),
        ("testParseNestedGenericTypes", testParseNestedGenericTypes),
        ("testParseParameterlessFunctionDefinition", testParseParameterlessFunctionDefinition),
        ("testParseProtocolReferenceListInProtocol", testParseProtocolReferenceListInProtocol),
        ("testParseReturnlessFunctionDefinition", testParseReturnlessFunctionDefinition),
        ("testParseReturnTypeAnnotationInBlock", testParseReturnTypeAnnotationInBlock),
        ("testParserMaintainsOriginalRuleContext", testParserMaintainsOriginalRuleContext),
        ("testParseSemicolonAfterMethodDefinition", testParseSemicolonAfterMethodDefinition),
        ("testParseStructDeclaration", testParseStructDeclaration),
        ("testParseSynthesizeDeclaration", testParseSynthesizeDeclaration),
        ("testParseVariableDeclarationOfPointerToFunction", testParseVariableDeclarationOfPointerToFunction),
        ("testParseVariadicParameterInFunctionDefinition", testParseVariadicParameterInFunctionDefinition),
    ]
}

extension ObjcParser_ObjcTypeTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ObjcParser_ObjcTypeTests = [
        ("testParseGenericObjcType", testParseGenericObjcType),
        ("testParseIdWithNoProtocols", testParseIdWithNoProtocols),
        ("testParseIdWithProtocolListObjcType", testParseIdWithProtocolListObjcType),
        ("testParsePointerQualifiers", testParsePointerQualifiers),
        ("testParseSignedAndUnsignedNumbers", testParseSignedAndUnsignedNumbers),
        ("testParseStructType", testParseStructType),
        ("testParseTypeSpecifiers", testParseTypeSpecifiers),
        ("testParseVoidType", testParseVoidType),
    ]
}

extension VarDeclarationTypeExtractorTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__VarDeclarationTypeExtractorTests = [
        ("testReadTypeVariableDeclaratorOrName", testReadTypeVariableDeclaratorOrName),
        ("testReadVarDeclaration", testReadVarDeclaration),
    ]
}

public func __allTests() -> [XCTestCaseEntry] {
    return [
        testCase(ObjcLexerTests.__allTests__ObjcLexerTests),
        testCase(ObjcLexer_TokenizerTests.__allTests__ObjcLexer_TokenizerTests),
        testCase(ObjcParserTests.__allTests__ObjcParserTests),
        testCase(ObjcParser_ObjcTypeTests.__allTests__ObjcParser_ObjcTypeTests),
        testCase(VarDeclarationTypeExtractorTests.__allTests__VarDeclarationTypeExtractorTests),
    ]
}
#endif
