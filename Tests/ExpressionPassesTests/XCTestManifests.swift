#if !canImport(ObjectiveC)
import XCTest

extension ASTCorrectorExpressionPassTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ASTCorrectorExpressionPassTests = [
        ("testAlwaysCorrectBaseExpressionsScalarTypesThatResolveAsNull", testAlwaysCorrectBaseExpressionsScalarTypesThatResolveAsNull),
        ("testAlwaysCorrectBaseExpressionsScalarTypesThatResolveAsNullInFunctionArguments", testAlwaysCorrectBaseExpressionsScalarTypesThatResolveAsNullInFunctionArguments),
        ("testCastDifferentNumericTypesInArithmeticOperations", testCastDifferentNumericTypesInArithmeticOperations),
        ("testCorrectExpressionsWithExpectedTypeDifferentThanTheirResolvedType", testCorrectExpressionsWithExpectedTypeDifferentThanTheirResolvedType),
        ("testCorrectMemberAccessNullableValueInNonnullParameterToIfLet", testCorrectMemberAccessNullableValueInNonnullParameterToIfLet),
        ("testCorrectMethodInvocationNullableValueInNonnullParameterToIfLet", testCorrectMethodInvocationNullableValueInNonnullParameterToIfLet),
        ("testCorrectMethodReturnNullableValueInNonnullParameterToIfLet", testCorrectMethodReturnNullableValueInNonnullParameterToIfLet),
        ("testCorrectNonnullStructWithNullableStructValue", testCorrectNonnullStructWithNullableStructValue),
        ("testCorrectNullableFloatingPoint", testCorrectNullableFloatingPoint),
        ("testCorrectNullableInteger", testCorrectNullableInteger),
        ("testCorrectPostfixAccessToNullableValueType", testCorrectPostfixAccessToNullableValueType),
        ("testCorrectsArbitraryBooleanExpressions", testCorrectsArbitraryBooleanExpressions),
        ("testCorrectsArbitraryBooleanExpressionsWithNilChecks", testCorrectsArbitraryBooleanExpressionsWithNilChecks),
        ("testCorrectsExpectedBooleanBinaryExpressions", testCorrectsExpectedBooleanBinaryExpressions),
        ("testCorrectsIfStatementBooleanExpressions", testCorrectsIfStatementBooleanExpressions),
        ("testCorrectsIfStatementNegatedBooleanExpressions", testCorrectsIfStatementNegatedBooleanExpressions),
        ("testCorrectsIfStatementWithNegatedNullableValue", testCorrectsIfStatementWithNegatedNullableValue),
        ("testCorrectsIfStatementWithNegatedNumericExpression", testCorrectsIfStatementWithNegatedNumericExpression),
        ("testCorrectsIfStatementWithNullableNumericExpressions", testCorrectsIfStatementWithNullableNumericExpressions),
        ("testCorrectsIfStatementWithNullableValue", testCorrectsIfStatementWithNullableValue),
        ("testCorrectsIfStatementWithNumericExpression", testCorrectsIfStatementWithNumericExpression),
        ("testCorrectSimpleNullableValueInNonnullParameterToIfLet", testCorrectSimpleNullableValueInNonnullParameterToIfLet),
        ("testCorrectsUnaryNegateExpressions", testCorrectsUnaryNegateExpressions),
        ("testCorrectsWhileStatementBooleanExpressions", testCorrectsWhileStatementBooleanExpressions),
        ("testCorrectsWhileStatementWithNullableNumericExpressions", testCorrectsWhileStatementWithNullableNumericExpressions),
        ("testCorrectsWhileStatementWithNullableValue", testCorrectsWhileStatementWithNullableValue),
        ("testCorrectsWhileStatementWithNumericExpression", testCorrectsWhileStatementWithNumericExpression),
        ("testCorrectUnaryArithmeticExpression", testCorrectUnaryArithmeticExpression),
        ("testDontCorrectBaseAssignmentExpressions", testDontCorrectBaseAssignmentExpressions),
        ("testDontCorrectBaseExpressionsScalarTypesForConstantExpressions", testDontCorrectBaseExpressionsScalarTypesForConstantExpressions),
        ("testDontCorrectImplicitlyUnwrappedOptionalRightHandSideOnAssignment", testDontCorrectImplicitlyUnwrappedOptionalRightHandSideOnAssignment),
        ("testDontCorrectNonnullStructWithNullabilityUnspecifiedStructValue", testDontCorrectNonnullStructWithNullabilityUnspecifiedStructValue),
        ("testDontCorrectNullableValuesPassedToNullableParameters", testDontCorrectNullableValuesPassedToNullableParameters),
        ("testDontCorrectPostfixAccessToNullableValueTypeWhenAccessIsImplicitlyUnwrapped", testDontCorrectPostfixAccessToNullableValueTypeWhenAccessIsImplicitlyUnwrapped),
        ("testDontCorrectPostfixAccessToNullableValueTypeWhenAccessIsMemberOnly", testDontCorrectPostfixAccessToNullableValueTypeWhenAccessIsMemberOnly),
        ("testDontCorrectSimpleNullableValueInNonnullParameterToIfLetIfArgumentIsNullableScalarType", testDontCorrectSimpleNullableValueInNonnullParameterToIfLetIfArgumentIsNullableScalarType),
        ("testDontCorrectUnknownExpressions", testDontCorrectUnknownExpressions),
        ("testDontCorrectUnknownExpressionsOnWhile", testDontCorrectUnknownExpressionsOnWhile),
        ("testDontRemoveNullableAccessFromCastExpressions", testDontRemoveNullableAccessFromCastExpressions),
        ("testNoCastForSameBitWidthNumerics", testNoCastForSameBitWidthNumerics),
        ("testNullCoalesceOnArithmeticComparison", testNullCoalesceOnArithmeticComparison),
        ("testNullCoalesceOnArithmeticOperators", testNullCoalesceOnArithmeticOperators),
        ("testNullCoalesceOnNestedArithmeticOperators", testNullCoalesceOnNestedArithmeticOperators),
    ]
}

extension ASTRewriterPassApplierTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ASTRewriterPassApplierTests = [
        ("testIgnoresApplicationOnNonPrimaryFiles", testIgnoresApplicationOnNonPrimaryFiles),
    ]
}

extension ASTSimplifierTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ASTSimplifierTests = [
        ("testDoesNotSimplifyDoWithinCompoundWithExtraStatements", testDoesNotSimplifyDoWithinCompoundWithExtraStatements),
        ("testDoNotSimplifyNonBlockCheckConstructs", testDoNotSimplifyNonBlockCheckConstructs),
        ("testDontAlterTestThenInvokeBlockOnIfWithElse", testDontAlterTestThenInvokeBlockOnIfWithElse),
        ("testDontRemoveBreakFromEmptyCases", testDontRemoveBreakFromEmptyCases),
        ("testDontSimplifyParenthesisInBinaryExpression", testDontSimplifyParenthesisInBinaryExpression),
        ("testMaintainStatementLabelWhileSimplifyingSingleStatementDos", testMaintainStatementLabelWhileSimplifyingSingleStatementDos),
        ("testSimplifyBreakAsLastSwitchCaseStatement", testSimplifyBreakAsLastSwitchCaseStatement),
        ("testSimplifyCheckThenCallConstructs", testSimplifyCheckThenCallConstructs),
        ("testSimplifyDoWithinCompound", testSimplifyDoWithinCompound),
        ("testSimplifyParenthesis", testSimplifyParenthesis),
        ("testSimplifyParenthesisDeep", testSimplifyParenthesisDeep),
        ("testSimplifyParenthesisInForExpression", testSimplifyParenthesisInForExpression),
        ("testSimplifyParenthesisInFunctionArguments", testSimplifyParenthesisInFunctionArguments),
        ("testSimplifyParenthesisInIfExpression", testSimplifyParenthesisInIfExpression),
        ("testSimplifyParenthesisInSubscriptionExpression", testSimplifyParenthesisInSubscriptionExpression),
        ("testSimplifyParenthesisInSwitchCaseExpressions", testSimplifyParenthesisInSwitchCaseExpressions),
        ("testSimplifyParenthesisInSwitchExpression", testSimplifyParenthesisInSwitchExpression),
        ("testSimplifyParenthesisInTopLevelExpression", testSimplifyParenthesisInTopLevelExpression),
        ("testSimplifyParenthesisInWhileExpression", testSimplifyParenthesisInWhileExpression),
    ]
}

extension AllocInitExpressionPassTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__AllocInitExpressionPassTests = [
        ("testInitSelfClassType", testInitSelfClassType),
        ("testInitSuperClassType", testInitSuperClassType),
        ("testInitWith", testInitWith),
        ("testInitWithCompoundName", testInitWithCompoundName),
        ("testInitWithThingSelfClassType", testInitWithThingSelfClassType),
        ("testInitWithThingSuperClassType", testInitWithThingSuperClassType),
        ("testOptionalInitWithThing", testOptionalInitWithThing),
        ("testPlainInit", testPlainInit),
        ("testSuperInitWith", testSuperInitWith),
    ]
}

extension CanonicalNameExpressionPassTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__CanonicalNameExpressionPassTests = [
        ("testDontTransformIdentifiersWhichFeaturesNonMetatypeResolvedType", testDontTransformIdentifiersWhichFeaturesNonMetatypeResolvedType),
        ("testDontTransformIdentifiersWhichFeaturesNonTypeDefinitions", testDontTransformIdentifiersWhichFeaturesNonTypeDefinitions),
        ("testDontTransformUnknownTypeName", testDontTransformUnknownTypeName),
        ("testTransformCanonicalTypeName", testTransformCanonicalTypeName),
        ("testTransformCanonicalTypeNameWithMetatypeResolvedType", testTransformCanonicalTypeNameWithMetatypeResolvedType),
    ]
}

extension CompoundTypeApplierExpressionPassTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__CompoundTypeApplierExpressionPassTests = [
        ("testCGPointMake", testCGPointMake),
        ("testCGRecsGetters", testCGRecsGetters),
        ("testCGRectContainsPointWithCGPointMake", testCGRectContainsPointWithCGPointMake),
        ("testCGRectContainsRectWithCGRectMake", testCGRectContainsRectWithCGRectMake),
        ("testCGRectConversions", testCGRectConversions),
        ("testCGRectEqualToRect", testCGRectEqualToRect),
        ("testCGRectInset", testCGRectInset),
        ("testCGRectIntersection", testCGRectIntersection),
        ("testCGRectIntersectsRect", testCGRectIntersectsRect),
        ("testCGRectIsNullWithCGRectMake", testCGRectIsNullWithCGRectMake),
        ("testCGRectOffset", testCGRectOffset),
        ("testCGSizeMake", testCGSizeMake),
        ("testConvertUIViewBooleanGetters", testConvertUIViewBooleanGetters),
        ("testStaticToConstructorTransformerLeniency", testStaticToConstructorTransformerLeniency),
        ("testUIColorConversions", testUIColorConversions),
        ("testUIViewAnimateWithDuration", testUIViewAnimateWithDuration),
    ]
}

extension CoreGraphicsExpressionPassTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__CoreGraphicsExpressionPassTests = [
        ("testCGContextStrokePath", testCGContextStrokePath),
        ("testCGRectMake", testCGRectMake),
        ("testConvertCGPathAddPoint", testConvertCGPathAddPoint),
        ("testConvertCGPathAddPointWithTransform", testConvertCGPathAddPointWithTransform),
        ("testCoreGraphicsGetters", testCoreGraphicsGetters),
        ("testCoreGraphicsStaticConstants", testCoreGraphicsStaticConstants),
        ("testRemovesCGPathRelease", testRemovesCGPathRelease),
        ("testUIEdgeInsetsMake", testUIEdgeInsetsMake),
    ]
}

extension DefaultExpressionPassesTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__DefaultExpressionPassesTests = [
        ("testDefaultExpressionPasses", testDefaultExpressionPasses),
    ]
}

extension EnumRewriterExpressionPassTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__EnumRewriterExpressionPassTests = [
        ("testDontApplyTransformationOnIdentifierWithDefinition", testDontApplyTransformationOnIdentifierWithDefinition),
        ("testEnumReplacementExpressionResolvedTypes", testEnumReplacementExpressionResolvedTypes),
        ("testReplaceEnum", testReplaceEnum),
    ]
}

extension FoundationExpressionPassTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__FoundationExpressionPassTests = [
        ("testAddObjectsFromArray", testAddObjectsFromArray),
        ("testAddObjectsFromArrayNullable", testAddObjectsFromArrayNullable),
        ("testClassTypeMethod", testClassTypeMethod),
        ("testClassTypeMethodWithResolvedExpressionType", testClassTypeMethodWithResolvedExpressionType),
        ("testIsEqualToString", testIsEqualToString),
        ("testIsEqualToStringNullable", testIsEqualToStringNullable),
        ("testNegatedIsEqualToString", testNegatedIsEqualToString),
        ("testNSArrayArrayCreator", testNSArrayArrayCreator),
        ("testNSCalendarIdentifierConversions", testNSCalendarIdentifierConversions),
        ("testNSCalendarUnitConversions", testNSCalendarUnitConversions),
        ("testNSCompareResultConversions", testNSCompareResultConversions),
        ("testNSDateDateCreator", testNSDateDateCreator),
        ("testNSDateFormatter", testNSDateFormatter),
        ("testNSDictionaryDictionaryCreator", testNSDictionaryDictionaryCreator),
        ("testNSLocaleTransformers", testNSLocaleTransformers),
        ("testNSMutableArrayArrayCreator", testNSMutableArrayArrayCreator),
        ("testNSMutableDictionaryDictionaryCreator", testNSMutableDictionaryDictionaryCreator),
        ("testNSMutableSetSetCreator", testNSMutableSetSetCreator),
        ("testNSMutableStringCreator", testNSMutableStringCreator),
        ("testNSMutableStringWithFormat", testNSMutableStringWithFormat),
        ("testNSNotificationCenterTransform", testNSNotificationCenterTransform),
        ("testNSNumberFormatter", testNSNumberFormatter),
        ("testNSSetSetCreator", testNSSetSetCreator),
        ("testNSStringWithFormat", testNSStringWithFormat),
        ("testNSTimeZoneSystemTimeZone", testNSTimeZoneSystemTimeZone),
        ("testNSTimeZoneTransformers", testNSTimeZoneTransformers),
        ("testRespondsToSelector", testRespondsToSelector),
        ("testRespondsToSelectorNullable", testRespondsToSelectorNullable),
    ]
}

extension InitRewriterExpressionPassTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__InitRewriterExpressionPassTests = [
        ("testAddOptionalToOptionalSuperInit", testAddOptionalToOptionalSuperInit),
        ("testEarlyExitIfSuperInit", testEarlyExitIfSuperInit),
        ("testEarlyExitIfSuperInitNonEmpty", testEarlyExitIfSuperInitNonEmpty),
        ("testEmptyIfInInit", testEmptyIfInInit),
        ("testEmptyIfInInitWithDelegatedSelfInit", testEmptyIfInInitWithDelegatedSelfInit),
        ("testNonEmptyIfInInit", testNonEmptyIfInInit),
    ]
}

extension LocalConstantPromotionExpressionPassTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__LocalConstantPromotionExpressionPassTests = [
        ("testDetectTrivialLetConstant", testDetectTrivialLetConstant),
        ("testDoNotPromoteWeakValues", testDoNotPromoteWeakValues),
        ("testNonConstantCase", testNonConstantCase),
    ]
}

extension NilValueTransformationsPassTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__NilValueTransformationsPassTests = [
        ("testAssignmentIntoOptionalValue", testAssignmentIntoOptionalValue),
        ("testConditionalMemberAccess", testConditionalMemberAccess),
        ("testConditionalMemberAccessNested", testConditionalMemberAccessNested),
        ("testIgnoreImplicitlyUnwrappedMemberAccess", testIgnoreImplicitlyUnwrappedMemberAccess),
        ("testIgnoreNonOptionalValues", testIgnoreNonOptionalValues),
        ("testLookIntoBlockExpressionsForPotentialChanges", testLookIntoBlockExpressionsForPotentialChanges),
        ("testLookupIntoChainedBlockExpressions", testLookupIntoChainedBlockExpressions),
        ("testModifyChainedMemberAccessAndMethodCallsWithinParameters", testModifyChainedMemberAccessAndMethodCallsWithinParameters),
        ("testModifyExpressionsInsideOtherExpressions", testModifyExpressionsInsideOtherExpressions),
        ("testNestedMemberOptionalMethodInvocation", testNestedMemberOptionalMethodInvocation),
        ("testTopLevelBlockInvocation", testTopLevelBlockInvocation),
        ("testTopLevelBlockInvocationOnImplicitlyUnwrapped", testTopLevelBlockInvocationOnImplicitlyUnwrapped),
    ]
}

extension NumberCommonsExpressionPassTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__NumberCommonsExpressionPassTests = [
        ("testConvertFloatMethods", testConvertFloatMethods),
        ("testConvertMacros", testConvertMacros),
        ("testConvertNumericCast", testConvertNumericCast),
        ("testConvertNumericTypesWithDifferentExpectedTypesWithCasts", testConvertNumericTypesWithDifferentExpectedTypesWithCasts),
        ("testConvertVariableDeclarations", testConvertVariableDeclarations),
        ("testDoNotConvertNonNumericCasts", testDoNotConvertNonNumericCasts),
        ("testDontConvertLiteralExpressions", testDontConvertLiteralExpressions),
        ("testLookIntoTypealiasesForNumericalCasts", testLookIntoTypealiasesForNumericalCasts),
    ]
}

extension PropertyAsMethodAccessCorrectingExpressionPassTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__PropertyAsMethodAccessCorrectingExpressionPassTests = [
        ("testDontTransformClosureCalls", testDontTransformClosureCalls),
        ("testDontTransformClosureCallsLookingThroughTypeAliases", testDontTransformClosureCallsLookingThroughTypeAliases),
        ("testTransform", testTransform),
        ("testTransformChained", testTransformChained),
        ("testTransformStaticType", testTransformStaticType),
    ]
}

extension UIKitExpressionPassTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__UIKitExpressionPassTests = [
        ("testAddTarget", testAddTarget),
        ("testConvertBooleanGettersOnOptionalViews", testConvertBooleanGettersOnOptionalViews),
        ("testConvertUIViewBooleanGetters", testConvertUIViewBooleanGetters),
        ("testEnumifyUIGestureRecognizerState", testEnumifyUIGestureRecognizerState),
        ("testEnumifyUIViewAnimationOptions", testEnumifyUIViewAnimationOptions),
        ("testNSTextAlignment", testNSTextAlignment),
        ("testUIColorStaticInitializers", testUIColorStaticInitializers),
        ("testUIFontInitializers", testUIFontInitializers),
        ("testUIFontWeight", testUIFontWeight),
        ("testUITableViewCellSelectionStyle", testUITableViewCellSelectionStyle),
        ("testUITableViewCellSeparatorStyle", testUITableViewCellSeparatorStyle),
    ]
}

extension VariableNullabilityPromotionExpressionPassTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__VariableNullabilityPromotionExpressionPassTests = [
        ("testAvoidPromotingVariableInitializedAsNilAndLaterAssignedAsNonNil", testAvoidPromotingVariableInitializedAsNilAndLaterAssignedAsNonNil),
        ("testAvoidPromotingVariableLaterAssignedAsNil", testAvoidPromotingVariableLaterAssignedAsNil),
        ("testDontPromoteErrorTypedInitializedVariables", testDontPromoteErrorTypedInitializedVariables),
        ("testDontPromoteNilInitializedVariables", testDontPromoteNilInitializedVariables),
        ("testDontPromoteUninitializedConstants", testDontPromoteUninitializedConstants),
        ("testDontPromoteWeakVariables", testDontPromoteWeakVariables),
        ("testNonNilPromotion", testNonNilPromotion),
    ]
}

public func __allTests() -> [XCTestCaseEntry] {
    return [
        testCase(ASTCorrectorExpressionPassTests.__allTests__ASTCorrectorExpressionPassTests),
        testCase(ASTRewriterPassApplierTests.__allTests__ASTRewriterPassApplierTests),
        testCase(ASTSimplifierTests.__allTests__ASTSimplifierTests),
        testCase(AllocInitExpressionPassTests.__allTests__AllocInitExpressionPassTests),
        testCase(CanonicalNameExpressionPassTests.__allTests__CanonicalNameExpressionPassTests),
        testCase(CompoundTypeApplierExpressionPassTests.__allTests__CompoundTypeApplierExpressionPassTests),
        testCase(CoreGraphicsExpressionPassTests.__allTests__CoreGraphicsExpressionPassTests),
        testCase(DefaultExpressionPassesTests.__allTests__DefaultExpressionPassesTests),
        testCase(EnumRewriterExpressionPassTests.__allTests__EnumRewriterExpressionPassTests),
        testCase(FoundationExpressionPassTests.__allTests__FoundationExpressionPassTests),
        testCase(InitRewriterExpressionPassTests.__allTests__InitRewriterExpressionPassTests),
        testCase(LocalConstantPromotionExpressionPassTests.__allTests__LocalConstantPromotionExpressionPassTests),
        testCase(NilValueTransformationsPassTests.__allTests__NilValueTransformationsPassTests),
        testCase(NumberCommonsExpressionPassTests.__allTests__NumberCommonsExpressionPassTests),
        testCase(PropertyAsMethodAccessCorrectingExpressionPassTests.__allTests__PropertyAsMethodAccessCorrectingExpressionPassTests),
        testCase(UIKitExpressionPassTests.__allTests__UIKitExpressionPassTests),
        testCase(VariableNullabilityPromotionExpressionPassTests.__allTests__VariableNullabilityPromotionExpressionPassTests),
    ]
}
#endif
